name: Build and Release
on:
  pull_request:
  push:
    branches:
      - '**'  # 监听所有分支的 push 事件

jobs:
  build:
    if: "!startsWith(github.ref, 'refs/tags/V')"  # 仅在 push 事件的引用不以 "V" 开头时运行
    strategy:
      matrix:
        minecraft: [ 1.17.1, 1.18.2, 1.19.2, 1.19.3, 1.19.4, 1.20.1 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: Setup ${{ matrix.minecraft }}
        run: ./gradlew setupLibrary -PbuildVersion="${{ matrix.minecraft }}"
      - name: Build ${{ matrix.minecraft }}
        run: ./gradlew build -PbuildVersion="${{ matrix.minecraft }}"
      - name: Get commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Capture release artifacts individually
        uses: actions/upload-artifact@v4
        with:
          name: MTR-ANTE-${{ steps.vars.outputs.sha_short }}+${{ matrix.minecraft }}
          path: build/*.jar

  release:
    if: startsWith(github.ref, 'refs/tags/V')  # 仅在 push 事件的引用以 "V" 开头时运行
    runs-on: ubuntu-latest
    needs: build  # 依赖 build 任务
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: Build all versions
        run: |
          for version in 1.17.1 1.18.2 1.19.2 1.19.3 1.19.4 1.20.1; do
            ./gradlew build -PbuildVersion="$version"
          done
      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y 年 / %m 月 / %d 日 // %H 时')" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动提供的 token
        with:
          tag_name: ${{ steps.tag.outputs.tag }}  # 使用标签名作为 Release 的 tag
          release_name: ${{ steps.tag.outputs.tag }}  # 使用标签名作为 Release 的标题
          body: |
            更新日期：${{ steps.date.outputs.date }}
            当前构建 [#Build ${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 从创建 Release 的步骤中获取上传 URL
          asset_path: build/*.jar  # 上传所有构建产物
          asset_name: MTR-ANTE-${{ steps.tag.outputs.tag }}.jar  # 设置资源名称
          asset_content_type: application/java-archive